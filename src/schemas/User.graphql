type User {
  _id: ObjID!
  email: String!
  password: String!
  firstName: String
  lastName: String
  phone: String
  roles: [String]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Query {
  users(limit: Int, skip: Int, sort: JSON): [User!] @hasRole(roles: ["admin"])
  user(_id: ObjID!): User @hasRole(roles: ["admin"])
  currentUser: User
}

input UserInput {
  email: String
  firstName: String
  lastName: String
  phone: String
}

input UserAddressInput {
  name: String
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  country: String
  telephone: String
  isCopy: Boolean
}

type LoginToken {
  token: String!
}

type Mutation {
  loginWithPassword(email: String!, password: String!): LoginToken
  createUser(input: UserInput!): User
  updateUser(_id: ObjID!, input: UserInput!): User @hasRole(roles: ["admin"])
  removeUser(_id: ObjID!): RemoveResult @hasRole(roles: ["admin"])
}

type Subscription {
  userCreated(_id: ObjID): User @hasRole(roles: ["admin"])
  userUpdated(_id: ObjID): User @hasRole(roles: ["admin"])
  userRemoved(_id: ObjID): ObjID @hasRole(roles: ["admin"])
}
